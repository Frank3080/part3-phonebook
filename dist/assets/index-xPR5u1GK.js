var d={};require("dotenv").config();const p=require("mongoose"),l=require("path"),u=require("express"),r=u(),f=require("body-parser"),i=require("morgan"),h=require("cors"),a=require("./models/person");r.use(h());r.use(u.json());r.use(u.static(l.join(__dirname,"dist")));i.token("postData",e=>e.method==="POST"&&e.body?JSON.stringify(e.body):" ");const g=":method :url :status :res[content-length] - :response-time ms :postData";r.use(i(":method :url :status :res[content-length] - :response-time ms"));r.use(i(g));r.use(f.json());r.get("/api/persons",(e,o,s)=>{a.find({}).then(n=>{o.json(n)}).catch(n=>s(n))});r.get("/api/persons/:id",(e,o,s)=>{const n=e.params.id;a.findById(n).then(t=>{if(!t)return o.status(404).json({error:"Person not found"});o.json(t)}).catch(t=>s(t))});r.delete("/api/persons/:id",(e,o,s)=>{const n=e.params.id;a.findOneAndDelete({_id:n}).then(t=>{if(!t)return o.status(404).json({error:"Person not found"});o.status(204).end()}).catch(t=>s(t))});r.post("/api/persons",(e,o,s)=>{const n=e.body;if(!n.name||!n.number)return o.status(400).json({error:"You have to put name and number"});a.create({name:n.name,number:n.number}).then(t=>{o.json(t)}).catch(t=>s(t))});r.get("/info",(e,o,s)=>{a.countDocuments({},(n,t)=>{if(n)return console.error(n),o.status(404).json({error:"Person not found"});const m=new Date;o.send(`<p>Phonebook has info for ${t} people</p> <p>${m}</p>`)})});const j=(e,o,s,n)=>{if(console.error(e.message),e.name==="CastError"&&e.kind==="ObjectId")return s.status(400).send({error:"malformatted id"});if(e.name==="ValidationError")return s.status(400).json({error:e.message});s.status(500).send({error:"Internal Server Error"})};r.use(j);const c=d.PORT||3001;p.connect(d.MONGODB_URI,{useNewUrlParser:!0,useUnifiedTopology:!0}).then(()=>{console.log("Connected to MongoDB"),r.listen(c,()=>{console.log(`Server is running on port ${c}`)})}).catch(e=>{console.error("Error connecting to MongoDB:",e)});
